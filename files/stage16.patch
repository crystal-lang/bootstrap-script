diff --git a/src/compiler/crystal/macro_expander.cr b/src/compiler/crystal/macro_expander.cr
index a4148aedf..3d0dc31b1 100644
--- a/src/compiler/crystal/macro_expander.cr
+++ b/src/compiler/crystal/macro_expander.cr
@@ -8,44 +8,50 @@ module Crystal
       mapped_args = node.args.map do |arg|
         if arg.is_a?(Call) && !arg.obj && !arg.block && !arg.block_arg && arg.args.length == 0
           Var.new(arg.name)
+        elsif arg.is_a?(Ident) && arg.names.length == 1
+          Var.new(arg.names.first)
+        elsif arg.is_a?(SymbolLiteral)
+          Var.new(arg.value)
+        elsif arg.is_a?(StringLiteral)
+          Var.new(arg.value)
+        elsif arg.is_a?(Assign)
+          arg.value
         else
           arg
         end
       end
 
+      macro_args = mapped_args.map &.to_crystal_macro_node
+
       macro_arg_types = mapped_args.map &.crystal_type_id
       info = @untyped_def.lookup_instance(macro_arg_types)
       unless info
-        typed_def = Def.new(@macro_name, @untyped_def.args.map(&.clone), @untyped_def.body.clone)
-        typed_def = @mod.normalize(typed_def) as Def
+        args = Array(ASTNode).new(mapped_args.length)
+        mapped_args.each do |arg|
+          args.push arg.to_crystal_node.not_nil!
+        end
 
-        vars = {} of String => Var
-        typed_def.args.zip(mapped_args) do |def_arg, macro_arg|
-          arg_type = lookup_node_type(macro_arg)
-          def_arg.set_type(arg_type)
+        typed_def = Def.new(@macro_name, @untyped_def.args.map(&.clone), @untyped_def.body.clone)
 
-          var = Var.new(def_arg.name, arg_type)
-          var.bind_to(var)
-          vars[def_arg.name] = var
-        end
+        macro_call = Call.new(nil, @macro_name, args)
+        macro_nodes = Expressions.new([typed_def, macro_call] of ASTNode)
+        macro_nodes = @mod.normalize(macro_nodes)
 
-        visitor = TypeVisitor.new(@mod, vars)
-        typed_def.bind_to typed_def.body
-        typed_def.body.accept visitor
+        @mod.infer_type macro_nodes
 
-        if typed_def.type != @mod.string
+        if macro_nodes.type != @mod.string
           node.raise "macro return value must be a String, not #{typed_def.type}"
         end
 
         llvm_mod = LLVM::Module.new @macro_name
         engine = LLVM::JITCompiler.new llvm_mod
 
-        visitor = CodeGenVisitor.new(@mod, typed_def, llvm_mod, true, true)
-        visitor.codegen_fun(@macro_name, typed_def, nil)
+        @mod.build macro_nodes, true, llvm_mod
 
         # llvm_mod.dump
 
-        func = llvm_mod.functions[@macro_name]?
+        func = llvm_mod.functions[macro_call.target_def.mangled_name(nil)]?
+
         info = Macro::Info.new(llvm_mod, engine, func)
         @untyped_def.add_instance info, macro_arg_types
       end
@@ -55,7 +61,7 @@ module Crystal
       func = info.func
 
       if func
-        macro_args = mapped_args.map do |arg|
+        macro_args = macro_args.map do |arg|
           pointer = Pointer(Void).new(arg.object_id)
           LibLLVM.create_generic_value_of_pointer(pointer)
         end
diff --git a/src/compiler/crystal/to_crystal.cr b/src/compiler/crystal/to_crystal.cr
new file mode 100644
index 000000000..413cc0443
--- /dev/null
+++ b/src/compiler/crystal/to_crystal.cr
@@ -0,0 +1,95 @@
+require "ast"
+
+module Crystal
+  class ASTNode
+    def to_crystal_node
+      visitor = ToCrystalNodeVisitor.new
+      accept visitor
+      visitor.value.not_nil!
+    end
+
+    def to_crystal_macro_node
+      visitor = ToCrystalMacroNodeVisitor.new
+      accept visitor
+      visitor.value.not_nil!
+    end
+  end
+
+  class ToCrystalNodeVisitor < Visitor
+    def visit(node : ASTNode)
+      true
+    end
+
+    def visit(node : NumberLiteral)
+      new_node "NumberLiteral", [StringLiteral.new(node.value), SymbolLiteral.new(node.kind.to_s)] of ASTNode
+    end
+
+    def visit(node : SymbolLiteral)
+      new_node "SymbolLiteral", StringLiteral.new(node.value)
+    end
+
+    def visit(node : StringLiteral)
+      new_node "StringLiteral", node
+    end
+
+    def visit(node : Var)
+      new_node "Var", StringLiteral.new(node.name)
+    end
+
+    def visit(node : InstanceVar)
+      new_node "InstanceVar", StringLiteral.new(node.name)
+    end
+
+    # def visit_array_literal(node)
+    #   args = []
+    #   node.elements.each do |elem|
+    #     elem.accept self
+    #     args.push @last
+    #   end
+    #   new_node 'ArrayLiteral', ArrayLiteral.new(args)
+    #   false
+    # end
+
+    def new_node(name, arg)
+      new_node name, [arg] of ASTNode
+    end
+
+    def new_node(name, args : Array)
+      @last = Call.new(Ident.new(["Macro", name]), "new", args)
+    end
+
+    def value
+      @last
+    end
+  end
+
+  class ToCrystalMacroNodeVisitor < Visitor
+    def visit(node : ASTNode)
+      true
+    end
+
+    # def visit(node : NumberLiteral)
+    #   new_node "NumberLiteral", [StringLiteral.new(node.value), SymbolLiteral.new(node.kind.to_s)] of ASTNode
+    # end
+
+    def visit(node : SymbolLiteral)
+      @last = Macro::SymbolLiteral.new(node.value)
+    end
+
+    def visit(node : StringLiteral)
+      @last = Macro::StringLiteral.new(node.value)
+    end
+
+    def visit(node : Var)
+      @last = Macro::Var.new(node.name)
+    end
+
+    def visit(node : InstanceVar)
+      @last = Macro::InstanceVar.new(node.name)
+    end
+
+    def value
+      @last
+    end
+  end
+end
