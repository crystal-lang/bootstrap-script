diff --git a/src/compiler/crystal/codegen.cr b/src/compiler/crystal/codegen.cr
index 5a6815a9c..5dacc574b 100644
--- a/src/compiler/crystal/codegen.cr
+++ b/src/compiler/crystal/codegen.cr
@@ -404,20 +404,14 @@ module Crystal
     end
 
     def codegen_primitive_allocate(node, target_def, call_args)
-      node_type = node.type
-      if node_type.is_a?(HierarchyType)
-        type = node_type.base_type
-      else
-        type = node_type
-      end
+      type = node.type
 
       struct_type = llvm_struct_type(type)
       @last = malloc struct_type
       memset @last, int8(0), LLVM.size_of(struct_type)
 
-      if node_type.is_a?(HierarchyType)
-        @last = box_object_in_hierarchy(node_type.base_type, node.type, @last, false)
-      end
+      type_id_ptr = gep @last, 0, 0
+      @builder.store int32(type.type_id), type_id_ptr
 
       @last
     end
@@ -685,7 +679,7 @@ module Crystal
       when InstanceVar
         type = @type as InstanceVarContainer
 
-        @last = gep llvm_self_ptr, 0, type.index_of_instance_var(node_exp.name)
+        @last = gep llvm_self_ptr, 0, (type.index_of_instance_var(node_exp.name) + 1)
       when IndirectRead
         @last = visit_indirect(node_exp)
       else
@@ -895,10 +889,10 @@ module Crystal
       name = name.replace '@', '.'
       key = StringKey.new(@llvm_mod, str)
       @strings[key] ||= begin
-        global = @llvm_mod.globals.add(LLVM.struct_type([LLVM::Int32, LLVM.array_type(LLVM::Int8, str.length + 1)]), name)
+        global = @llvm_mod.globals.add(LLVM.struct_type([LLVM::Int32, LLVM::Int32, LLVM.array_type(LLVM::Int8, str.length + 1)]), name)
         LLVM.set_linkage global, LibLLVM::Linkage::Private
         LLVM.set_global_constant global, true
-        LLVM.set_initializer global, LLVM.struct([int32(str.length), LLVM.string(str)])
+        LLVM.set_initializer global, LLVM.struct([int32(@mod.string.type_id), int32(str.length), LLVM.string(str)])
         cast_to global, @mod.string
       end
     end
@@ -1205,7 +1199,7 @@ module Crystal
       type = @type as InstanceVarContainer
 
       ivar = type.lookup_instance_var(target.name)
-      index = type.index_of_instance_var(target.name)
+      index = type.index_of_instance_var(target.name) + 1
 
       ptr = gep llvm_self_ptr, 0, index
       codegen_assign(ptr, target.type, value.type, llvm_value)
@@ -1449,7 +1443,11 @@ module Crystal
 
       ivar = type.lookup_instance_var(node.name)
       if ivar.type.union? || ivar.type.c_struct? || ivar.type.c_union?
-        @last = gep llvm_self_ptr, 0, type.index_of_instance_var(node.name)
+        if ivar.type.union?
+          @last = gep llvm_self_ptr, 0, type.index_of_instance_var(node.name) + 1
+        else
+          @last = gep llvm_self_ptr, 0, type.index_of_instance_var(node.name)
+        end
         unless node.type == ivar.type
           if node.type.union?
             @last = cast_to_pointer @last, node.type
@@ -1460,7 +1458,7 @@ module Crystal
           end
         end
       else
-        index = type.index_of_instance_var(node.name)
+        index = type.index_of_instance_var(node.name) + 1
 
         struct = @builder.load llvm_self_ptr
         @last = @builder.extract_value struct, index, node.name
@@ -1938,7 +1936,7 @@ module Crystal
             call_args << @vars[arg.name].pointer
           when InstanceVar
             type = @type as InstanceVarContainer
-            call_args << (gep llvm_self_ptr, 0, type.index_of_instance_var(arg.name))
+            call_args << (gep llvm_self_ptr, 0, (type.index_of_instance_var(arg.name) + 1))
           else
             raise "Bug: out argument was #{arg}"
           end
diff --git a/src/compiler/crystal/codegen/llvm_typer.cr b/src/compiler/crystal/codegen/llvm_typer.cr
index 74ad50c7f..64a6d2b16 100644
--- a/src/compiler/crystal/codegen/llvm_typer.cr
+++ b/src/compiler/crystal/codegen/llvm_typer.cr
@@ -116,7 +116,8 @@ module Crystal
         @struct_cache[type] = struct
 
         ivars = type.all_instance_vars
-        element_types = Array(LibLLVM::TypeRef).new(ivars.length)
+        element_types = Array(LibLLVM::TypeRef).new(ivars.length + 1)
+        element_types.push LLVM::Int32 # For the type id
         ivars.each { |name, ivar| element_types.push llvm_embedded_type(ivar.type) }
         element_types
       end
diff --git a/src/compiler/crystal/macro_expander.cr b/src/compiler/crystal/macro_expander.cr
index 78d27a6f1..48e205cb5 100644
--- a/src/compiler/crystal/macro_expander.cr
+++ b/src/compiler/crystal/macro_expander.cr
@@ -7,6 +7,26 @@ module Crystal
     end
 
     def expand(node)
+      body = @untyped_def.body
+
+      # A simple case: when the macro is just a string interpolation with variables,
+      # we do it without a JIT
+      if body.is_a?(StringInterpolation)
+        if body.expressions.all? { |exp| exp.is_a?(StringLiteral) || exp.is_a?(Var) }
+          return String.build do |str|
+            body.expressions.each do |exp|
+              case exp
+              when StringLiteral
+                str << exp.value
+              when Var
+                index = @untyped_def.args.index { |arg| arg.name == exp.name }.not_nil!
+                str << node.args[index].to_s
+              end
+            end
+          end
+        end
+      end
+
       mapped_args = node.args.map do |arg|
         if arg.is_a?(Call) && !arg.obj && !arg.block && !arg.block_arg && arg.args.length == 0
           Var.new(arg.name)
diff --git a/src/compiler/crystal/normalizer.cr b/src/compiler/crystal/normalizer.cr
index 5d5d785e2..61214c0c1 100644
--- a/src/compiler/crystal/normalizer.cr
+++ b/src/compiler/crystal/normalizer.cr
@@ -597,17 +597,6 @@ module Crystal
     end
 
     def transform(node : Macro)
-      # if node.has_default_arguments?
-      #   exps = node.expand_default_arguments.map! { |a_def| a_def.transform(self) }
-      #   return Expressions.new(exps)
-      # end
-
-      if node.body
-        pushing_vars_from_args(node.args) do
-          node.body = node.body.transform(self)
-        end
-      end
-
       node
     end
 
